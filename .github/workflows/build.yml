on:
  push:
    branches:
      - main

name: Build and Release

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '*' # Use the latest stable version of Go

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: cd cmd/pwgen; go build -v -o pwgen

      - name: Get Release ID if exists
        id: get_release
        run: |
          RELEASE_ID=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/latest" \
            | jq '.id // ""')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
        shell: bash

      - name: Create Release if Not Exists
        if: env.RELEASE_ID == ''
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: latest
          release_name: Latest Release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release ID if Created
        if: env.RELEASE_ID == ''
        run: echo "RELEASE_ID=${{ steps.create_release.outputs.id }}" >> $GITHUB_ENV

      - name: Upload the artifacts
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ env.RELEASE_ID }}
          args: 'cmd/pwgen/pwgen'
